// hooks/useFibonacci.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { useState, useCallback } from 'react';
import { 
  FibonacciState, 
  FibonacciPoint, 
  FibonacciRetracement,
  FIBONACCI_LEVELS_CONFIG 
} from '@/types/fibonacci';

export const useFibonacci = () => {
  const [fibonacciState, setFibonacciState] = useState<FibonacciState>({
    isDrawing: false,
    currentPoints: {
      start: null,
      end: null
    },
    retracements: []
  });

  // –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
  const normalizeTime = useCallback((timestamp: number, chartData?: Array<{ time: any }>): number => {
    if (!chartData || chartData.length === 0) {
      return timestamp;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
    const sampleTime = chartData[0]?.time;
    
    if (typeof sampleTime === 'string') {
      // –ï—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ —Å—Ç—Ä–æ–∫—É
      // –ù–æ –ø–æ—Å–∫–æ–ª—å–∫—É –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å —á–∏—Å–ª–∞–º–∏, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º timestamp
      // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ —Å—Ç—Ä–æ–∫—É –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
      console.log('üìÖ –ì—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ —Ç–æ—á–∫–∏ –§–∏–±–æ–Ω–∞—á—á–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —á–∏—Å–ª–∞');
    } else if (typeof sampleTime === 'number') {
      // –ï—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—à—Ç–∞–±
      const chartTimeScale = sampleTime > 10000000000 ? 1 : 1000; // UNIX –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      const inputTimeScale = timestamp > 10000000000 ? 1 : 1000;
      
      if (chartTimeScale !== inputTimeScale) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–æ—Ç –∂–µ –º–∞—Å—à—Ç–∞–±, —á—Ç–æ –∏ –≥—Ä–∞—Ñ–∏–∫
        return chartTimeScale === 1 ? Math.floor(timestamp / 1000) : timestamp * 1000;
      }
    }
    
    return timestamp;
  }, []);

  // –ù–∞—á–∞—Ç—å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –§–∏–±–æ–Ω–∞—á—á–∏
  const startDrawing = useCallback(() => {
    console.log('üéØ [useFibonacci] startDrawing called');
    setFibonacciState(prev => {
      const newState = {
        ...prev,
        isDrawing: true,
        currentPoints: { start: null, end: null }
      };
      console.log('üéØ [useFibonacci] New state after startDrawing:', newState);
      return newState;
    });
  }, []);

  // –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ
  const cancelDrawing = useCallback(() => {
    console.log('üéØ [useFibonacci] cancelDrawing called');
    setFibonacciState(prev => {
      const newState = {
        ...prev,
        isDrawing: false,
        currentPoints: { start: null, end: null }
      };
      console.log('üéØ [useFibonacci] New state after cancelDrawing:', newState);
      return newState;
    });
  }, []);

  // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É (–Ω–∞—á–∞–ª–æ –∏–ª–∏ –∫–æ–Ω–µ—Ü) —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤—Ä–µ–º–µ–Ω–∏
  const addPoint = useCallback((point: FibonacciPoint, chartData?: Array<{ time: any }>) => {
    setFibonacciState(prev => {
      if (!prev.isDrawing) return prev;

      const { start, end } = prev.currentPoints;
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è —Ç–æ—á–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è chartData
      const normalizedPoint = {
        ...point,
        time: normalizeTime(point.time, chartData)
      };
      
      if (!start) {
        return {
          ...prev,
          currentPoints: { ...prev.currentPoints, start: normalizedPoint }
        };
      } else if (!end) {
        const newRetracement = createFibonacciRetracement(start, normalizedPoint);
        return {
          isDrawing: false,
          currentPoints: { start: null, end: null },
          retracements: [...prev.retracements, newRetracement]
        };
      }
      
      return prev;
    });
  }, [normalizeTime]);

  // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏
  const clearAll = useCallback(() => {
    setFibonacciState({
      isDrawing: false,
      currentPoints: { start: null, end: null },
      retracements: []
    });
  }, []);

  // –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
  const removeRetracement = useCallback((id: string) => {
    setFibonacciState(prev => ({
      ...prev,
      retracements: prev.retracements.filter(r => r.id !== id)
    }));
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
  const generateRandomColor = (): string => {
    const colors = [
      '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',
      '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9',
      '#F8C471', '#82E0AA', '#F1948A', '#85C1E9', '#D7BDE2',
      '#F9E79F', '#A9DFBF', '#F5B7B1', '#AED6F1', '#D2B4DE'
    ];
    const randomIndex = Math.floor(Math.random() * colors.length);
    return colors[randomIndex] || '#FF6B6B';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
  const generateUniqueId = (): string => {
    return `fib-${Date.now()}-${Math.random().toString(36).substring(2, 11)}`;
  };

  const createFibonacciRetracement = (start: FibonacciPoint, end: FibonacciPoint): FibonacciRetracement => {
    const isUptrend = end.price > start.price;
    const lowPoint = isUptrend ? start : end;
    const highPoint = isUptrend ? end : start;
    const priceDiff = highPoint.price - lowPoint.price;

    console.log(`üìä [Fibonacci] –†–∞—Å—á–µ—Ç:`, {
      lowPrice: lowPoint.price,
      highPrice: highPoint.price,
      diff: priceDiff,
      isUptrend,
      startTime: new Date(start.time * 1000).toISOString(),
      endTime: new Date(end.time * 1000).toISOString()
    });

    const levels = FIBONACCI_LEVELS_CONFIG.filter(level => level.visible).map((config, index) => {
      const price = isUptrend
        ? lowPoint.price + priceDiff * config.ratio
        : highPoint.price - priceDiff * config.ratio;

      console.log(`üìä [Fibonacci] –£—Ä–æ–≤–µ–Ω—å ${config.label}: ${isUptrend ? lowPoint.price : highPoint.price} ${isUptrend ? '+' : '-'} ${priceDiff} * ${config.ratio} = ${price}`);

      return {
        level: index,
        ratio: config.ratio,
        price: price,
        label: config.label,
        color: config.color,
        visible: true
      };
    });

    return {
      id: generateUniqueId(),
      startPoint: start,
      endPoint: end,
      levels,
      color: generateRandomColor(),
      visible: true
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
  const getFibonacciSeriesData = useCallback((retracement: FibonacciRetracement, chartData?: Array<{ time: any }>) => {
    const data = [];
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è —Ç–æ—á–µ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const startTime = normalizeTime(retracement.startPoint.time, chartData);
    const endTime = normalizeTime(retracement.endPoint.time, chartData);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–∏–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞
    data.push(
      { time: startTime, value: retracement.startPoint.price },
      { time: endTime, value: retracement.endPoint.price }
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏
    retracement.levels.forEach(level => {
      data.push(
        { time: startTime, value: level.price },
        { time: endTime, value: level.price }
      );
    });
    
    return data;
  }, [normalizeTime]);

  return {
    fibonacciState,
    startDrawing,
    cancelDrawing,
    addPoint,
    clearAll,
    removeRetracement,
    getFibonacciSeriesData,
    normalizeTime
  };
};