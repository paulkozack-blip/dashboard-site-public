/**
 * useChartData - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ –≥—Ä—É–ø–ø—ã, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, refresh/abort
 * @param group string - –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
 * @returns { series, volumeStack, isLoading, error, refresh }
 */

import { useRef, useState, useCallback, useEffect } from 'react';
import { GroupChartData } from '@/types/api';
import { SeriesInfo, VolumeStackPoint } from '@/types/charts';
import { apiService } from '@/services/api';
import { adaptGroupChartData } from '@/services/adapter';
import { aggregateVolumeStack } from '@/utils/math';
import { BASE_COLORS } from '@/utils/color';

export function useChartData(group: string) {
  const abortRef = useRef<AbortController | null>(null);
  const seqRef = useRef<number>(0);

  const [series, setSeries] = useState<SeriesInfo[]>([]);
  const [volumeStack, setVolumeStack] = useState<VolumeStackPoint[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const fetchData = useCallback(async (seqToken: number) => {
    setIsLoading(true);
    setError(null);
    abortRef.current?.abort();
    abortRef.current = new AbortController();

    try {
      console.log(`üìä [useChartData] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã: ${group}`);
      const data: GroupChartData = await apiService.getChartData(group);

      if (seqRef.current !== seqToken) {
        console.log(`üîÑ [useChartData] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã: ${group}`);
        return; // ignore stale result
      }

      console.log(`‚úÖ [useChartData] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –∞–¥–∞–ø—Ç–∞—Ü–∏—è...`);
      
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞
      const seriesInfo = adaptGroupChartData(data);
      setSeries(seriesInfo);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –æ–±—ä–µ–º–æ–≤ —Å —Ü–≤–µ—Ç–∞–º–∏
      const volumeData: Record<string, Array<{ time: number; volume: number; color: string }>> = {};
      
      seriesInfo.forEach((s, index) => {
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ü–≤–µ—Ç –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
        const color = BASE_COLORS[index % BASE_COLORS.length] as string;
        
        volumeData[s.ticker] = (s.data as any[]).map(d => ({
          time: d.time,
          volume: d.volume ?? 0,
          color: color,
        }));
      });

      console.log(`üìà [useChartData] –ê–≥—Ä–µ–≥–∞—Ü–∏—è –æ–±—ä–µ–º–æ–≤ –¥–ª—è ${Object.keys(volumeData).length} —Ç–∏–∫–µ—Ä–æ–≤`);
      
      // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
      const aggregatedVolumeStack = aggregateVolumeStack(volumeData);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç–∏ –≤ –∫–∞–∂–¥–æ–º –±–∞—Ä–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ–±—ä–µ–º–∞
      const sortedVolumeStack = aggregatedVolumeStack.map(point => ({
        ...point,
        parts: [...point.parts].sort((a, b) => b.volume - a.volume)
      }));

      setVolumeStack(sortedVolumeStack);
      
      console.log(`‚úÖ [useChartData] –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã:`, {
        series: seriesInfo.length,
        volumePoints: sortedVolumeStack.length,
        tickers: seriesInfo.map(s => s.ticker)
      });
      
      setIsLoading(false);
      
    } catch (e: any) {
      if (e.name === 'CanceledError' || e.name === 'AbortError') {
        console.log(`‚èπÔ∏è [useChartData] –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã: ${group}`);
        return;
      }
      
      console.error(`‚ùå [useChartData] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã ${group}:`, e);
      setError(e.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
      setIsLoading(false);
    }
  }, [group]);

  useEffect(() => {
    seqRef.current += 1;
    const currentSeq = seqRef.current;
    
    console.log(`üéØ [useChartData] –ó–∞–ø—É—Å–∫ —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã: ${group}, seq: ${currentSeq}`);
    fetchData(currentSeq);
    
    return () => {
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ —Å–º–µ–Ω–µ –≥—Ä—É–ø–ø—ã
      console.log(`üßπ [useChartData] –û—á–∏—Å—Ç–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã: ${group}`);
      abortRef.current?.abort();
      setSeries([]); // –û—á–∏—â–∞–µ–º —Å–µ—Ä–∏–∏
      setVolumeStack([]); // –û—á–∏—â–∞–µ–º –æ–±—ä–µ–º—ã
    };
  }, [group, fetchData]);

  const refresh = useCallback(() => {
    console.log(`üîÑ [useChartData] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã: ${group}`);
    seqRef.current += 1;
    fetchData(seqRef.current);
  }, [fetchData, group]);

  return { series, volumeStack, isLoading, error, refresh };
}