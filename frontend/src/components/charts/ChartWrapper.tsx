// components/charts/ChartWrapper.tsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import React, { useMemo, useState, useEffect, useCallback } from 'react';
import TickerHeader from './TickerHeader';
import IndicatorPanel from './IndicatorPanel';
import CandlestickOrLineChart from './CandlestickOrLineChart';
import Legend from './Legend';

import { useChartData } from '@/hooks/useChartData';
import { useIndicators } from '@/hooks/useIndicators';
import { useColors } from '@/hooks/useColors';
import { useFibonacci } from '@/hooks/useFibonacci';
import { VolumeStackPoint } from '@/types/charts';
import './ChartWrapper.css';

interface ChartWrapperProps {
  group: string;
}

// —Ç–∏–ø –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º–∏ EMA
interface TickerIndicators {
  ema: Record<number, boolean>;
  rsi: boolean;
  volume: boolean;
}

const ChartWrapper: React.FC<ChartWrapperProps> = ({ group }) => {
  const { series, volumeStack, isLoading, error, refresh } =
    useChartData(group);
  const tickers = useMemo(
    () => Array.from(new Set(series.map((s) => s.ticker))),
    [series]
  );
  const { colorMap, getEmaColor } = useColors(group, tickers);

  // –•—É–∫ –§–∏–±–æ–Ω–∞—á—á–∏
  const { fibonacciState, startDrawing, cancelDrawing, addPoint, clearAll } =
    useFibonacci();

  const [activeTickers, setActiveTickers] = useState<string[]>([]);
  const [currentTicker, setCurrentTicker] = useState<string | null>(null);

  const [activeIndicators, setActiveIndicators] = useState<
    Record<string, TickerIndicators>
  >({});

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
  const indicatorsHook = useIndicators(tickers, colorMap);

  useEffect(() => {
    if (tickers.length > 0) {
      console.log(
        `‚úÖ [ChartWrapper] –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø—ã ${group}:`,
        tickers
      );
      setActiveTickers(tickers);
      const firstTicker = tickers[0];
      if (firstTicker) {
        setCurrentTicker(firstTicker);
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º–∏ EMA (–Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ)
      const defaultIndicators: Record<string, TickerIndicators> = {};
      const emaPeriods = indicatorsHook.settings?.ema_periods || [50, 200];

      tickers.forEach((ticker) => {
        const emaStates: Record<number, boolean> = {};
        emaPeriods.forEach((period) => {
          emaStates[period] = false;
        });

        defaultIndicators[ticker] = {
          ema: emaStates,
          rsi: false,
          volume: true,
        };
      });
      setActiveIndicators(defaultIndicators);
    }
  }, [tickers, group, indicatorsHook.settings]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ç–∏–∫–µ—Ä–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
  const handleLoadIndicators = useCallback(
    async (ticker: string) => {
      console.log(
        `üì• [ChartWrapper] –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ç–∏–∫–µ—Ä–∞: ${ticker}`
      );

      if (!activeTickers.includes(ticker)) {
        console.warn(
          `‚ö†Ô∏è –ù–µ–ª—å–∑—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞: ${ticker}`
        );
        return;
      }

      try {
        await indicatorsHook.loadTickerIndicators(ticker);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
        setActiveIndicators((prev) => {
          const current = prev[ticker];
          if (current && Object.keys(current.ema).length > 0) {
            return prev; // –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
          }

          const emaPeriods = indicatorsHook.settings?.ema_periods || [50, 200];
          const emaStates: Record<number, boolean> = {};
          emaPeriods.forEach((period) => {
            emaStates[period] = false;
          });

          return {
            ...prev,
            [ticker]: {
              ema: emaStates,
              rsi: false,
              volume: true,
            },
          };
        });

        console.log(
          `‚úÖ [ChartWrapper] –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è ${ticker} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`
        );
      } catch (error) {
        console.error(
          `‚ùå [ChartWrapper] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è ${ticker}:`,
          error
        );
      }
    },
    [indicatorsHook, activeTickers]
  );

  const chartKey = useMemo(() => {
    const activeTickersKey = activeTickers.sort().join('-');
    const indicatorsKey = Object.keys(activeIndicators)
      .sort()
      .map((ticker) => {
        const indicators = activeIndicators[ticker];
        if (!indicators) return '';
        const emaKeys = Object.keys(indicators.ema)
          .filter((period) => indicators.ema[Number(period)])
          .join('');
        return `${ticker}-${emaKeys}${indicators.rsi ? 'R' : ''}${indicators.volume ? 'V' : ''}`;
      })
      .join('_');

    return `${group}-${activeTickersKey}-${indicatorsKey}`;
  }, [group, activeTickers, activeIndicators]);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–∏–∫–µ—Ä–∞
  const toggleTicker = (ticker: string) => {
    setActiveTickers((prev) => {
      const isCurrentlyActive = prev.includes(ticker);
      const newActiveTickers = isCurrentlyActive
        ? prev.filter((t) => t !== ticker)
        : [...prev, ticker];

      if (isCurrentlyActive) {
        // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ä–∞
        setActiveIndicators((prevIndicators) => {
          const currentIndicators = prevIndicators[ticker];
          if (!currentIndicators) return prevIndicators;

          const disabledEma: Record<number, boolean> = {};
          Object.keys(currentIndicators.ema).forEach((period) => {
            disabledEma[Number(period)] = false;
          });

          return {
            ...prevIndicators,
            [ticker]: {
              ...currentIndicators,
              ema: disabledEma,
              rsi: false,
              volume: false,
            },
          };
        });
      } else {
        // –í–∫–ª—é—á–∞–µ–º volume –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–∏–∫–µ—Ä–∞
        setActiveIndicators((prevIndicators) => ({
          ...prevIndicators,
          [ticker]: {
            ema: prevIndicators[ticker]?.ema || {},
            rsi: prevIndicators[ticker]?.rsi || false,
            volume: true,
          },
        }));
      }

      return newActiveTickers;
    });
  };

  // –í—ã–±–æ—Ä —Ç–∏–∫–µ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
  const selectTicker = (ticker: string) => {
    setCurrentTicker(ticker);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ EMA –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–∫–µ—Ä–∞
  const toggleEmaIndicator = async (period: number) => {
    if (!currentTicker) return;

    if (!activeTickers.includes(currentTicker)) {
      console.warn(
        `‚ö†Ô∏è –ù–µ–ª—å–∑—è –≤–∫–ª—é—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞: ${currentTicker}`
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
    const hasLoadedIndicators =
      indicatorsHook.loadedTickers.includes(currentTicker);
    if (!hasLoadedIndicators) {
      console.log(
        `üîÑ [ChartWrapper] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è ${currentTicker}`
      );
      await handleLoadIndicators(currentTicker);
    }

    setActiveIndicators((prev) => {
      const currentTickerIndicators = prev[currentTicker] || {
        ema: {},
        rsi: false,
        volume: true,
      };

      return {
        ...prev,
        [currentTicker]: {
          ...currentTickerIndicators,
          ema: {
            ...currentTickerIndicators.ema,
            [period]: !currentTickerIndicators.ema[period],
          },
        },
      };
    });
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–∫–µ—Ä–∞
  const toggleRsiIndicator = async () => {
    if (!currentTicker) return;

    if (!activeTickers.includes(currentTicker)) {
      console.warn(
        `‚ö†Ô∏è –ù–µ–ª—å–∑—è –≤–∫–ª—é—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞: ${currentTicker}`
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
    const hasLoadedIndicators =
      indicatorsHook.loadedTickers.includes(currentTicker);
    if (!hasLoadedIndicators) {
      console.log(
        `üîÑ [ChartWrapper] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è ${currentTicker}`
      );
      await handleLoadIndicators(currentTicker);
    }

    setActiveIndicators((prev) => {
      const currentTickerIndicators = prev[currentTicker] || {
        ema: {},
        rsi: false,
        volume: true,
      };

      return {
        ...prev,
        [currentTicker]: {
          ...currentTickerIndicators,
          rsi: !currentTickerIndicators.rsi,
        },
      };
    });
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ Volume –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–∫–µ—Ä–∞
  const toggleVolumeIndicator = () => {
    if (!currentTicker) return;

    if (!activeTickers.includes(currentTicker)) {
      console.warn(
        `‚ö†Ô∏è –ù–µ–ª—å–∑—è –≤–∫–ª—é—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞: ${currentTicker}`
      );
      return;
    }

    setActiveIndicators((prev) => {
      const currentTickerIndicators = prev[currentTicker] || {
        ema: {},
        rsi: false,
        volume: true,
      };

      return {
        ...prev,
        [currentTicker]: {
          ...currentTickerIndicators,
          volume: !currentTickerIndicators.volume,
        },
      };
    });
  };

  // –§–∏–ª—å—Ç—Ä—É–µ–º volumeStack –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –æ–±—ä–µ–º–∞–º
  const filteredVolumeStack = useMemo(() => {
    return volumeStack
      .map((point: VolumeStackPoint) => ({
        ...point,
        parts: point.parts.filter((part) => {
          const isTickerActive = activeTickers.includes(part.ticker);
          const isVolumeActive =
            activeIndicators[part.ticker]?.volume !== false;
          return isTickerActive && isVolumeActive;
        }),
      }))
      .filter((point) => point.parts.length > 0);
  }, [volumeStack, activeTickers, activeIndicators]);

  // –§–∏–ª—å—Ç—Ä—É–µ–º indicatorMap –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
  const filteredIndicatorMap = useMemo(() => {
    const filtered: Record<string, any> = {};

    Object.entries(indicatorsHook.indicatorMap).forEach(
      ([key, indicatorData]) => {
        const ticker = indicatorData.ticker;

        if (activeTickers.includes(ticker)) {
          const tickerIndicators = activeIndicators[ticker];
          if (tickerIndicators) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º EMA –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            const isEmaActive = key.includes('_ema_');
            if (isEmaActive) {
              const periodMatch = key.split('_ema_')[1];
              if (periodMatch) {
                const period = parseInt(periodMatch);
                if (tickerIndicators.ema[period]) {
                  filtered[key] = indicatorData;
                }
              }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            const isRsiActive = key.includes('_rsi_') && tickerIndicators.rsi;
            if (isRsiActive) {
              filtered[key] = indicatorData;
            }
          }
        }
      }
    );

    return filtered;
  }, [indicatorsHook.indicatorMap, activeTickers, activeIndicators]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const handleRefresh = useCallback(() => {
    console.log(`üîÑ [ChartWrapper] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`);
    refresh();
    indicatorsHook.refresh();
  }, [refresh, indicatorsHook]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ –§–∏–±–æ–Ω–∞—á—á–∏
  const handleAddFibonacciPoint = useCallback(
    (point: { time: number; price: number }) => {
      addPoint(point);
    },
    [addPoint]
  );

  console.log('üö® DEBUG ChartWrapper State:', {
    currentTicker,
    hasIndicators: !!indicatorsHook.settings,
    indicatorsSettings: indicatorsHook.settings,
    tickers: tickers,
    activeTickers: activeTickers,
    loadedTickers: indicatorsHook.loadedTickers,
    isLoadingIndicators: indicatorsHook.isLoading,
    errorIndicators: indicatorsHook.error,
    fibonacciState: fibonacciState,
  });

  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –§–∏–±–æ–Ω–∞—á—á–∏:
  const handleStartDrawing = useCallback(() => {
    startDrawing();
  }, [startDrawing]);

  const handleCancelDrawing = useCallback(() => {
    cancelDrawing();
  }, [cancelDrawing]);

  return (
    <div
      className={`chart-wrapper ${fibonacciState.isDrawing ? 'drawing-fibonacci' : ''}`}
    >
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Ç–∏–∫–µ—Ä–æ–≤ */}
      <TickerHeader
        tickers={tickers}
        activeTickers={activeTickers}
        colorMap={colorMap}
        currentTicker={currentTicker}
        onToggleTicker={toggleTicker}
        onSelectTicker={selectTicker}
      />

      {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ */}
      <IndicatorPanel
        currentTicker={currentTicker}
        colorMap={colorMap}
        indicators={indicatorsHook.settings}
        indicatorStatus={activeIndicators}
        onToggleEmaIndicator={toggleEmaIndicator}
        onToggleRsiIndicator={toggleRsiIndicator}
        onToggleVolumeIndicator={toggleVolumeIndicator}
        onLoadIndicators={handleLoadIndicators}
        isLoadingIndicators={indicatorsHook.isLoading}
        isDrawingFibonacci={fibonacciState.isDrawing}
        hasFibonacciRetracements={fibonacciState.retracements.length > 0}
        onStartFibonacciDrawing={handleStartDrawing}
        onCancelFibonacciDrawing={handleCancelDrawing}
        onClearFibonacci={clearAll}
      />

      {fibonacciState.isDrawing && (
        <div className="fibonacci-drawing-hint">
          üéØ –†–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è –§–∏–±–æ–Ω–∞—á—á–∏: –∫–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫–∏
          (2 —Ç–æ—á–∫–∏)
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      <div className="chart-actions">
        <button
          type="button"
          onClick={handleRefresh}
          className="refresh-btn"
          disabled={isLoading || indicatorsHook.isLoading}
        >
          <span className="refresh-icon">‚Üª</span>
          {isLoading || indicatorsHook.isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
        </button>
      </div>

      {isLoading && (
        <div className="chart-loading">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞...</p>
        </div>
      )}

      {error && (
        <div className="error-box">
          <span className="error-message">–û—à–∏–±–∫–∞: {error}</span>
          <button onClick={handleRefresh}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
        </div>
      )}

      {!isLoading &&
        !error &&
        tickers.length > 0 &&
        activeTickers.length > 0 && (
          <CandlestickOrLineChart
            key={chartKey}
            series={series.filter((s) => activeTickers.includes(s.ticker))}
            volumeStack={filteredVolumeStack}
            indicatorMap={filteredIndicatorMap}
            activeIndicators={activeIndicators}
            colorMap={colorMap}
            getEmaColor={getEmaColor}
            emaPeriods={indicatorsHook.settings?.ema_periods || []}
            fibonacciState={fibonacciState}
            onAddFibonacciPoint={handleAddFibonacciPoint}
          />
        )}

      {!isLoading &&
        !error &&
        (tickers.length === 0 || activeTickers.length === 0) && (
          <div className="no-data-message">
            <p>
              {tickers.length === 0
                ? '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'
                : '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤'}
            </p>
          </div>
        )}

      <Legend
        series={series}
        tickers={activeTickers}
        indicatorMap={filteredIndicatorMap}
        colorMap={colorMap}
        activeIndicators={activeIndicators}
        volumeStack={filteredVolumeStack}
      />
    </div>
  );
};

export default ChartWrapper;
