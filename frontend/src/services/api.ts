// services/api.ts

import axios from 'axios';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã
import {
  GroupsData,
  LoginCredentials,
  RegisterData,
  User,
  ApiUser,
  TickerName,
  GroupChartData,
  IndicatorResponse,
  IndicatorSettingsResponse,
  LoginResponse,
} from '../types';

const API_BASE_URL = 'http://localhost:8000';

export const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

export const apiService = {
  // –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
  login: async (credentials: LoginCredentials): Promise<LoginResponse> => {
    console.log(`üîê [API] –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${credentials.username}`);
    const response = await api.post('/auth/login', credentials);
    console.log(
      `‚úÖ [API] –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${credentials.username}`
    );
    return response.data;
  },

  register: async (userData: RegisterData): Promise<any> => {
    console.log(`üìù [API] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userData.username}`);
    const response = await api.post('/auth/register', userData);
    console.log(
      `‚úÖ [API] –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userData.username}`
    );
    return response.data;
  },

  getProfile: async (): Promise<User> => {
    console.log(`üë§ [API] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
    const response = await api.get('/auth/profile');
    return response.data;
  },

  getMe: async (): Promise<User> => {
    console.log(`üë§ [API] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
    const response = await api.get('/auth/me');
    return response.data;
  },

  // –î–ê–ù–ù–´–ï
  uploadLinearData: async (file: File): Promise<any> => {
    console.log(`üì§ [API] –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–Ω–µ–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${file.name}`);
    const formData = new FormData();
    formData.append('file', file);
    const response = await api.post('/charts/upload', formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
    });
    console.log(`‚úÖ [API] –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–Ω–µ–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    return response.data;
  },

  uploadCandlestickData: async (file: File): Promise<any> => {
    console.log(`üì§ [API] –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${file.name}`);
    const formData = new FormData();
    formData.append('file', file);
    const response = await api.post('/charts/upload-candlestick', formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
    });
    console.log(`‚úÖ [API] –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    return response.data;
  },

  resetData: async (ticker?: string): Promise<any> => {
    const url = ticker
      ? `/charts/reset?ticker=${encodeURIComponent(ticker)}`
      : '/charts/reset';
    console.log(
      `üóëÔ∏è [API] –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö: ${ticker ? `—Ç–∏–∫–µ—Ä ${ticker}` : '–≤—Å–µ –¥–∞–Ω–Ω—ã–µ'}`
    );
    const response = await api.post(url);
    console.log(`‚úÖ [API] –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω`);
    return response.data;
  },

  // –ì–†–£–ü–ü–´ –ò –¢–ò–ö–ï–†–´
  getAvailableGroups: async (): Promise<GroupsData> => {
    console.log(`üìä [API] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø`);
    const response = await api.get('/charts/api/available-groups');
    console.log(
      `‚úÖ [API] –ü–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–ø–ø: ${Object.keys(response.data).length}`
    );
    return response.data;
  },

  getTickers: async (): Promise<TickerName[]> => {
    console.log(`üìà [API] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤`);
    const response = await api.get('/charts/api/tickers');
    console.log(`‚úÖ [API] –ü–æ–ª—É—á–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: ${response.data.length}`);
    return response.data;
  },

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ getChartData - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç GroupChartData
  getChartData: async (group: string): Promise<GroupChartData> => {
    console.log(`üìä [API] –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã: ${group}`);
    const response = await api.get('/charts/api/chart-data', {
      params: { group },
    });

    const tickerCount = Object.keys(response.data).length;
    console.log(
      `‚úÖ [API] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø—ã ${group}: ${tickerCount} —Ç–∏–∫–µ—Ä–æ–≤`
    );

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ç–∏–∫–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const firstTickerName = Object.keys(response.data)[0];
    if (firstTickerName) {
      const firstTicker = response.data[firstTickerName];
      console.log(
        `üìã [API] –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö - —Ç–∏–∫–µ—Ä: ${firstTicker.ticker}, —Ç–∏–ø: ${firstTicker.type}, –∑–∞–ø–∏—Å–µ–π: ${firstTicker.data.length}`
      );
    }

    return response.data;
  },

  // –ò–ù–î–ò–ö–ê–¢–û–†–´
  getIndicatorSettings: async (): Promise<IndicatorSettingsResponse> => {
    console.log(`‚öôÔ∏è [API] –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤`);
    const response = await api.get('/charts/getIndicatorSettings');
    console.log(`‚úÖ [API] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã:`, {
      emaPeriods: response.data.ema_periods,
      rsiPeriod: response.data.rsi_period,
    });
    return response.data;
  },

  getIndicatorData: async (
    ticker: string,
    indicator: string,
    period: number
  ): Promise<IndicatorResponse> => {
    const encodedTicker = encodeURIComponent(ticker);
    console.log(
      `üìà [API] –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: ${indicator}_${period} –¥–ª—è —Ç–∏–∫–µ—Ä–∞: ${ticker}`
    );

    const response = await api.get(
      `/charts/indicators/${encodedTicker}?indicator=${indicator}&period=${period}`
    );

    console.log(
      `‚úÖ [API] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ ${indicator}_${period}: ${response.data.data.length} —Ç–æ—á–µ–∫`
    );
    return response.data;
  },

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
  getEMA: async (
    ticker: string,
    period: number
  ): Promise<IndicatorResponse> => {
    return apiService.getIndicatorData(ticker, 'ema', period);
  },

  getRSI: async (
    ticker: string,
    period: number
  ): Promise<IndicatorResponse> => {
    return apiService.getIndicatorData(ticker, 'rsi', period);
  },

  // –ò–ù–í–ê–ô–¢–´
  createInvite: async (inviteData?: {
    username_for?: string;
    expires_in_days?: number;
  }): Promise<any> => {
    console.log(`üé´ [API] –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞`);
    const response = await api.post('/invites/create', inviteData || {});
    console.log(`‚úÖ [API] –ò–Ω–≤–∞–π—Ç-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω: ${response.data.invite_code}`);
    return response.data;
  },

  getMyInvites: async (): Promise<any> => {
    console.log(`üé´ [API] –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∏—Ö –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–æ–≤`);
    const response = await api.get('/invites/my');
    return response.data;
  },

  validateInvite: async (inviteCode: string): Promise<any> => {
    console.log(`üîç [API] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞: ${inviteCode}`);
    const response = await api.get(`/invites/validate/${inviteCode}`);
    return response.data;
  },

  deleteInvite: async (inviteId: string): Promise<any> => {
    console.log(`üóëÔ∏è [API] –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞: ${inviteId}`);
    const response = await api.delete(`/invites/${inviteId}`);
    console.log(`‚úÖ [API] –ò–Ω–≤–∞–π—Ç-–∫–æ–¥ —É–¥–∞–ª–µ–Ω`);
    return response.data;
  },

  // –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–ï
  getUsers: async (): Promise<ApiUser[]> => {
    console.log(`üë• [API] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    const response = await api.get('/admin/users');
    console.log(`‚úÖ [API] –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`, response.data);

    // –ë—ç–∫–µ–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { users: [], total: number }, –±–µ—Ä–µ–º –ø–æ–ª–µ users
    const users = response.data.users || [];
    console.log(`‚úÖ [API] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    return users;
  },

  deleteUser: async (userId: number): Promise<any> => {
    console.log(`üóëÔ∏è [API] –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    const response = await api.delete(`/admin/users/${userId}`);
    console.log(`‚úÖ [API] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω`);
    return response.data;
  },

  toggleUserActive: async (userId: number): Promise<any> => {
    console.log(`üîÑ [API] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    const response = await api.post(`/admin/users/${userId}/activate`);
    console.log(`‚úÖ [API] –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω`);
    return response.data;
  },

  makeUserAdmin: async (userId: number): Promise<any> => {
    console.log(`üëë [API] –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    const response = await api.post(`/admin/users/${userId}/make-admin`);
    console.log(`‚úÖ [API] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º`);
    return response.data;
  },

  setIndicators: async (settings: any): Promise<any> => {
    console.log(`‚öôÔ∏è [API] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤`, settings);
    try {
      const response = await api.post('/charts/set-indicators', settings);
      console.log(`‚úÖ [API] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã`);
      return response.data;
    } catch (error: any) {
      console.error(`‚ùå [API] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:`, error);
      throw error;
    }
  },
};

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
api.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error(`‚ùå [API] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`, {
      url: error.config?.url,
      method: error.config?.method,
      status: error.response?.status,
      message: error.response?.data?.message || error.message,
    });
    return Promise.reject(error);
  }
);

api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    console.log(
      `üöÄ [API] –ó–∞–ø—Ä–æ—Å: ${config.method?.toUpperCase()} ${config.url}`
    );
    return config;
  },
  (error) => Promise.reject(error)
);
